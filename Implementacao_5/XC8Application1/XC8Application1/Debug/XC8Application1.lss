
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009e3  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006e6  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028f  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000159  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000019d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.UART_config 00000016  0000015c  0000015c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.USART_Transmit 0000000e  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_enviaString 0000002c  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Timer   0000001a  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_11 00000024  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 00000011  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    00000046  00000092  00000092  00000106  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.libgcc  0000001a  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   8:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
   c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  10:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  14:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  18:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  1c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  20:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  24:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  28:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_11>
  30:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  34:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  38:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  3c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  40:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  44:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  4c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  50:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  54:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  58:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  5c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  60:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>
  64:	0c 94 c0 00 	jmp	0x180	; 0x180 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 49 00 	call	0x92	; 0x92 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000180 <__bad_interrupt>:
 180:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UART_config:

0000015c <UART_config>:
void UART_config(unsigned int ubrr)
{
	//Baud Rate de 9600bps para um cristal de 16MHz (Datasheet)
	//UBRR0 = 103;
	
	UBRR0H = (unsigned char)(ubrr>>8);
 15c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 160:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//Habilita os pinos TX e RX
	UCSR0B =  (1<<RXEN0) | (1<<TXEN0) ;
 164:	88 e1       	ldi	r24, 0x18	; 24
 166:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//Configura a UART com 8 bits de dados
	UCSR0C =  (1<<UCSZ01) | (1<<UCSZ00);
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 170:	08 95       	ret

Disassembly of section .text.USART_Transmit:

00000172 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 172:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 176:	95 ff       	sbrs	r25, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 17a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17e:	08 95       	ret

Disassembly of section .text.UART_enviaString:

000000d8 <UART_enviaString>:
}

void UART_enviaString(char *s)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	8c 01       	movw	r16, r24
	unsigned int i=0;
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d0 e0       	ldi	r29, 0x00	; 0
	while (s[i] != '\x0')
  e6:	03 c0       	rjmp	.+6      	; 0xee <UART_enviaString+0x16>
	{
		USART_Transmit(s[i++]);
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Transmit>
}

void UART_enviaString(char *s)
{
	unsigned int i=0;
	while (s[i] != '\x0')
  ee:	f8 01       	movw	r30, r16
  f0:	ec 0f       	add	r30, r28
  f2:	fd 1f       	adc	r31, r29
  f4:	80 81       	ld	r24, Z
  f6:	81 11       	cpse	r24, r1
  f8:	f7 cf       	rjmp	.-18     	; 0xe8 <UART_enviaString+0x10>
	{
		USART_Transmit(s[i++]);
	};
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	08 95       	ret

Disassembly of section .text.Timer:

00000128 <Timer>:

void Timer(){
	OCR1A = 62500;//1952;
 128:	84 e2       	ldi	r24, 0x24	; 36
 12a:	94 ef       	ldi	r25, 0xF4	; 244
 12c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 130:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);				// Habilita interrupcao pelo match com o comparador A
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = 0x0C;						// Modo: 4 CTC , Prescale: 256
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 140:	08 95       	ret

Disassembly of section .text.__vector_11:

00000104 <__vector_11>:
}

ISR(TIMER1_COMPA_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
	   PORTB ^= 0X01;
 112:	95 b1       	in	r25, 0x05	; 5
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	89 27       	eor	r24, r25
 118:	85 b9       	out	0x05, r24	; 5
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

Disassembly of section .text.main:

00000092 <main>:

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	61 97       	sbiw	r28, 0x11	; 17
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0X01;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	84 b9       	out	0x04, r24	; 4
	//unsigned char data;
	char s[] = "a porra ta seria";
  aa:	20 e8       	ldi	r18, 0x80	; 128
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	81 e1       	ldi	r24, 0x11	; 17
  b2:	f9 01       	movw	r30, r18
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	74 2f       	mov	r23, r20
  ba:	0e 94 a1 00 	call	0x142	; 0x142 <__movmemx_qi>
	int baud = 103;
	UART_config(baud);
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 ae 00 	call	0x15c	; 0x15c <UART_config>
	cli();
  c6:	f8 94       	cli
	Timer();
  c8:	0e 94 94 00 	call	0x128	; 0x128 <Timer>
	sei();
  cc:	78 94       	sei
	UART_enviaString(s);
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <UART_enviaString>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x44>

Disassembly of section .text.libgcc:

00000142 <__movmemx_qi>:
 142:	99 27       	eor	r25, r25

00000144 <__movmemx_hi>:
 144:	77 fd       	sbrc	r23, 7
 146:	05 c0       	rjmp	.+10     	; 0x152 <__movmemx_hi+0xe>
 148:	05 90       	lpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	e1 f7       	brne	.-8      	; 0x148 <__movmemx_hi+0x4>
 150:	08 95       	ret
 152:	01 90       	ld	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	e1 f7       	brne	.-8      	; 0x152 <__movmemx_hi+0xe>
 15a:	08 95       	ret
