
Mini_SDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000da  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000109  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000850  00000000  00000000  00000129  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005e0  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000170  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.main    00000002  00000084  00000084  000000d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 42 00 	call	0x84	; 0x84 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000084 <main>:
 */ 

#include <xc.h>

int main(void)
{
  84:	ff cf       	rjmp	.-2      	; 0x84 <main>
